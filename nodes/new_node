#!/usr/bin/env python
import sys

import rospy
import actionlib
from std_srvs.srv import Empty, EmptyResponse
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from controller_manager_msgs.srv import SwitchControllerRequest, SwitchController
from controller_manager_msgs.srv import LoadControllerRequest, LoadController
import geometry_msgs.msg as geometry_msgs
# from cartesian_control_msgs.msg import (
#     FollowCartesianTrajectoryAction,
#     FollowCartesianTrajectoryGoal,
#     CartesianTrajectoryPoint,
# )

import moveit_commander


pos_left = [2.14,-2.00,-1.63,3.50,-1.71,3.0]
pos_right = [2.14,-3.39,-1.63,-1.70,-1.71,-2.64]


class Mover:
    """Node to test basic functions of UR robot"""
    def __init__(self): 
        '''
        Initialize variables and load parameters.
        '''
        moveit_commander.roscpp_initialize(sys.argv)
        self.robot = moveit_commander.RobotCommander()
        group_name = "ur5e_arm"
        self.move_group = moveit_commander.MoveGroupCommander(group_name)
        self.robot_step_left = rospy.Service("step_left", Empty , self.step_left) 
        self.robot_step_right = rospy.Service("step_right", Empty , self.step_right) 
        self.timer = rospy.Timer(rospy.Duration(1.0/10.0), self.main_loop)

    def main_loop(self,timer):
        # temp_pos = self.move_group.get_current_pose("manipulator")
	a = 1

    def step_left(self,req):
        '''
        Function: Moves the robot to a specified x, y, z coordinates. Also moves the gripper.
        Arguments:Pose, but only uses the x, y, z coordinates. Also, true or false arguments for opening and closing the gripper.
        Return: Error code, 1 for success and -1 for failure.
        '''
	print("error1")
        self.move_group.set_joint_value_target(pos_left)
	'''
	#only works with python3
	print("error2")
        # move_group.set_pose_target(pose_in_space)
        ##use set_target_position
        (success_flag, trajectory_message,planning_time, error_code) = self.move_group.plan()
	print("error3")
        if success_flag == False:
            return error_code
	print("error4")
        self.move_group.execute(trajectory_message, wait=TRUE)
	'''
        self.move_group.go(wait=True)
        self.move_group.stop()
        self.move_group.clear_pose_targets()
 
        ###########################################

        return EmptyResponse()

    
    def step_right(self,req):
        '''
        Function: Moves the robot to a specified x, y, z coordinates. Also moves the gripper.
        Arguments:Pose, but only uses the x, y, z coordinates. Also, true or false arguments for opening and closing the gripper.
        Return: Error code, 1 for success and -1 for failure.
        '''
        self.move_group.set_joint_value_target(pos_right)
        # move_group.set_pose_target(pose_in_space)
        ##use set_target_position
        (success_flag, trajectory_message,planning_time, error_code) = self.move_group.plan()
        if success_flag == False:
            return error_code
        self.move_group.execute(trajectory_message,wait=True)
        self.move_group.stop()
        self.move_group.clear_pose_targets()
 
        ###########################################

        return EmptyResponse()


def main(): #The main function.
    rospy.init_node("test_node")
    try:
        move_arm = Mover()
        rospy.spin()

    except rospy.ROSInterruptException:
        return
    except KeyboardInterrupt:
        return


if __name__ == "__main__":
    main()
